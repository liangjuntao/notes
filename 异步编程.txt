主要是它能够在多核系统上提高吞吐率
提高对UI的快速响应
异步编程提供了一个非阻塞的，事件驱动的编程模型

这种编程模型利用系统中多核执行任务来提供并行，因此提供了应用的吞吐率。
此处吞吐率是指在单位时间内所做任务的数量。

og框架就是一个很好的例子：
典型地你想将异常和错误日志记录到一个目标中， 
比如文件，数据库或者其它类似地方。
你不会让你的程序等待日志写完才执行，否则程序的响应就会受到影响。 
相反，如果对log框架的调用是异步地，应用就可以并发执行其它任务而无需等待。
这是一个非阻塞执行的例子。

当任务互相不依赖时异步方式尤其有用。

使用场景：
比如在进行IO操作的时候尽可能的避免同步阻塞的等待，因为这会浪费CPU的资源